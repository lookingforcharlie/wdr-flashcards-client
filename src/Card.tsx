import React, { useState } from 'react';
import { AiOutlineDelete, AiOutlineSave } from 'react-icons/ai';
import { RiEditBoxLine } from 'react-icons/ri';
import { TCard } from './App';

type TProps = {
  card: TCard;
  cards: TCard[];
  handleDeleteCard: (cardIdx: number) => Promise<void>;
  idx: number;
  deckId: string | undefined;
  textFront: string;
  setTextFront: React.Dispatch<React.SetStateAction<string>>;
  textBack: string;
  setTextBack: React.Dispatch<React.SetStateAction<string>>;
  isEditable: boolean;
  setIsEditable: React.Dispatch<React.SetStateAction<boolean>>;
  singleCardId: string;
  setSingleCardId: React.Dispatch<React.SetStateAction<string>>;
};

function Card(Props: TProps) {
  const {
    card,
    cards,
    handleDeleteCard,
    idx,
    deckId,
    textFront,
    setTextFront,
    textBack,
    setTextBack,
    isEditable,
    setIsEditable,
    singleCardId,
    setSingleCardId,
  } = Props;

  const [isFlip, setIsFlip] = useState(false);

  // const [frontModify, setFrontModify] = useState('');
  // const [backModify, setBackModify] = useState('');

  const handleFlip = () => {
    setIsFlip((prev) => !prev);
  };

  const handleEditButton = (card: TCard) => {
    console.log('card id generated by MongoDB:', card._id);
    console.log('card index in cards:', idx);

    // Maybe I use card index, create a hook to store card index, use card index to modify the card content
    // find the target card by it's id or by it's index?

    // const findCard = cards.find((item) => item._id === card._id);
    // console.log('Found Card: ', findCard);
    // if (findCard) {
    //   setTextFront(findCard.front);
    //   setTextBack(findCard.back);
    // }
    // // setSingleCardId(card._id);
    // setIsEditable((prev) => !prev);
  };

  return (
    <div
      onClick={handleFlip}
      className='relative [perspective:1000px]  bg-gray-300 shadow-lg border border-stone-800 p-12  hover:bg-gray-200 cursor-pointer'
    >
      {/* Edit and delete buttons wrapper*/}
      <div className={`absolute top-2 right-3 z-30 flex gap-1`}>
        <RiEditBoxLine
          onClick={() => handleEditButton(card)}
          className='hover:cursor-pointer z-30'
        />

        <AiOutlineDelete
          onClick={() => handleDeleteCard(idx)}
          className='hover:cursor-pointer'
        />
      </div>
      {/* Edit and delete buttons end */}

      <div
        className={`relative  border-black flex flex-col items-center justify-center transition-all duration-500 [transform-style:preserve-3d] ${
          isFlip && '[transform:rotateY(180deg)]'
        } [backface-visibility:hidden] `}
      >
        {/* front wrapper */}
        <div className='relative '>
          <div className='hover:opacity-80 select-none'>{card.front}</div>
        </div>
        {/* front ends */}

        {/* back wrapper */}
        <div
          onClick={handleFlip}
          className='absolute inset-0 w-full h-full rounded-md text-center text-slate-800 [transform:rotateY(180deg)] [backface-visibility:hidden]'
        >
          <div className='text-red-500 border-2 border-black'>{card.back}</div>
        </div>
        {/* back ends */}
      </div>
    </div>
  );
}

export default Card;
